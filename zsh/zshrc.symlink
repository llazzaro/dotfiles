# lazy_source function to avoid slowdown on new terminal or tmux windows.
lazy_source () {
    eval "$1 () { [ -f $2 ] && source $2 && $1 \$@ }"
}

# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="aussiegeek"

# Set to this to use case-sensitive completion
# CASE_SENSITIVE="true"

# Uncomment this to disable bi-weekly auto-update checks
# DISABLE_AUTO_UPDATE="true"

# Uncomment to change how often before auto-updates occur? (in days)
export UPDATE_ZSH_DAYS=30

# Uncomment following line if you want to disable marking untracked files under
# VCS as dirty. This makes repository status check for large repositories much,
# much faster.
DISABLE_UNTRACKED_FILES_DIRTY="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
plugins=(git git-flow brew history node npm kubectl)

source $ZSH/oh-my-zsh.sh

# User configuration

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

#fix vim colors
export TERM=xterm-256color
[ -n "$TMUX" ] && export TERM=screen-256color

# add aliases
source $HOME/.aliases

PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting

[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # This loads RVM into a shell session

zstyle ':completion:*' special-dirs true

# Report CPU usage for commands running longer than 2 seconds
REPORTTIME=2

if [[ `uname` == 'Linux' ]]
then
        export LINUX=1
        export GNU_USERLAND=1
else
        export LINUX=0
fi

if [[ `uname` == 'Darwin' ]]
then
        export OSX=1
else
        export OSX=0
fi


if [[ "$LINUX" == "1" ]]
then
    export MAKEFLAGS="-j$(grep -c processor /proc/cpuinfo)"
    export PROJECT_HOME=$HOME/Devel
    export LC_CTYPE=en_US.UTF-8
    export LC_ALL=C
fi

if [[ "$OSX" == "1" ]]
then
    export PYENV_ROOT=/usr/local/var/pyenv
    export LD_LIBRARY_PATH=/usr/local/Cellar/gcc/5.2.0/lib/gcc/5/libgfortran.a
fi

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

export ANSIBLE_CONFIG=~/.ansible/ansible.cfg
export ANSIBLE_HOSTS=~/.ansible/hosts
export PATH=$PATH:~/.local/bin:/opt/homebrew/bin
export EDITOR=vim

# pyenv related env vars and initialization
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

NVM_SOURCE=$HOME/.nvm/nvm.sh
lazy_source nvm $NVM_SOURCE

export PATH="$HOME/.rbenv/bin:$HOME/opt/vim/bin:$PATH"
eval "$(rbenv init -)"

export GOROOT=/usr/local/go
export GOPATH=$HOME/go
export PATH=$PATH:$GOROOT/bin:$GOPATH/bin

# avoids freezing the terminal when using ctrl-s
# alias vim="stty stop '' -ixoff ; vim"
# `Frozing' tty, so after any command terminal settings will be restored
ttyctl -f

# bash
# No ttyctl, so we need to save and then restore terminal settings
vim()
{
    # osx users, use stty -g
    if [[ "$OSX" == "1" ]]
    then
        local STTYOPTS="$(stty -g)"
    else
        local STTYOPTS="$(stty --save)"
    fi
    stty stop '' -ixoff
    command vim "$@"
    stty "$STTYOPTS"
}

export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/opt/openssl/lib/
source /usr/local/opt/kube-ps1/share/kube-ps1.sh

PROMPT='$(kube_ps1)'$PROMPT
